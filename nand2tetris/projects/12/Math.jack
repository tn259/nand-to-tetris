// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    /** Initializes the library. */
    function void init() {
      return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
      if (x < 0) {
        let x = x - x + x;
      }
      return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
      var int sum, shiftedX, i, cmp;
      let sum = 0;
      let shiftedX = x;
      let i = 0;
      let cmp = 1;
      while (i < 16) {
        if (y & cmp) {
          let sum = sum + shiftedX;
        }
        let shiftedX = shiftedX + shiftedX;
        let i = i + 1;
        let cmp = cmp + cmp;
      }
      return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
      var int q, qy; 
      var bool negative;

      if (y > x | y < 0) {
        return 0;
      }

      if (x < 0) {
        let negative = true;
      }
      else {
        let negative = false;
      }

      let q = Math.divide(x, y + y);

      let qy = Math.multiply(q, y);
      if ((x - qy + qy) < y) {
        if (negative = true) {
          return -(q + q);
        }
        else {
          return q + q;
        }
      }
      else {
        if (negative = true) {
          return -(q + q + 1);
        }
        else {
          return q + q + 1;
        }
      }
    }

    function int pow(int x, int exponent) {
      var int i, res;
      let i = 0;
      let res = x;
      while (i < (exponent-1)) {
        let res = Math.multiply(x, res);
      }
      return res;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
      var int y, j, cmp, pow2j;
      let y = 0;
      let j = 7; // n = 16, n/2 - 1
      while (j > 0 | j = 0) {
        let pow2j = Math.pow(2, j);
        let cmp = Math.pow(y + pow2j, 2);
        if (cmp < x | cmp = x) {
          let y = y + pow2j;
        }
        let j = j - 1;
      }
      return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
      if (b > a) {
        return b;
      }
      else {
        return a;
      }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
      if (b < a) {
        return b;
      }
      else {
        return a;
      }
    }
}
