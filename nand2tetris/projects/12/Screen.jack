// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static boolean colour;
    static Array twoTo16Map;

    /** Initializes the Screen. */
    function void init() {
      var int i, current2Pow;
 
      let twoTo16Map = Array.new(16);
      let i = 0;
      let current2Pow = 1;
      while (i < 16) {
        let twoTo16Map[i] = current2Pow;
        let current2Pow = current2Pow + current2Pow;
        let i = i+1;
      }
      
      do Screen.setColor(true);
      return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
      var int i;

      let i = 16384;
      while (i < 24576) {
        do Memory.poke(i, 0);
        let i = i + 1;
      }
      return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
      let colour = b;
      return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
      var int address, value, xMod16, xdiv16, powi, mask;

      let xdiv16 = Math.divide(x, 16);
      let address = Math.multiply(32, y) + xdiv16;
      let value = Memory.peek(16384+address);
     
      // x % 16 
      let xMod16 = x - Math.multiply(16, xdiv16);

      // pow(2, xMod16) = mask
      let mask = twoTo16Map[xMod16];
      
      if (colour) {
        // set black
        let value = value | mask;
      }
      else {
        // set white
        let mask = value & ~mask;
      }

      do Memory.poke(16384+address, value);
      return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
      var int dx, dy, diff, a, b, x_start, y_start;
      var bool dxIsPositive, dyIsPositive;

      let dx = x2 - x1;
      let dy = y2 - y1;

      let a = 0;
      let b = 0; 

      if (x1 = x2) {
        if (dy > 0) {
          while ((b < dy) | (b = dy)) {
            do Screen.drawPixel(x1, y1+b);
            let b = b+1;
          }
        }
        else {
          if (dy < 0) {
            while ((b > dy) | (b = dy)) {
              do Screen.drawPixel(x1, y1+b);
              let b = b-1;
            }
          }
          else {
            do Screen.drawPixel(x1, y1);
          }
        }
        return;
      }

      if (y1 = y2) {
        if (dx > 0) {
          while ((a < dx) | (a = dx)) {
            do Screen.drawPixel(x1+a, y1);
            let a = a+1;
          }
        }
        else {
          if (dx < 0) {
            while ((a > dx) | (a = dx)) {
              do Screen.drawPixel(x1+a, y1);
              let a = a-1;
            }
          }
          else {
            do Screen.drawPixel(x1, y1);
          }
        }
        return;
      }

      let dxIsPositive = (dx > 0);
      let dyIsPositive = (dy > 0);
      let diff = 0; 
      
      if ((dxIsPositive & dyIsPositive) | (~dxIsPositive & ~dyIsPositive)) {
        if (dxIsPositive) {
          let x_start = x1;
          let y_start = y1;
        }
        else {
          let x_start = x2;
          let y_start = y2;
        }
        let dx = Math.abs(dx);
        let dy = Math.abs(dy);
        while (((a < dx) | (a = dx)) & ((b < dy) | (b = dy))) {
          do Screen.drawPixel(x_start+a, y_start+b);
          // right or down
          if (diff < 0) {
            let a = a+1;
            let diff = diff+dy;
          }
          else {
            let b = b+1; 
            let diff = diff-dx;
          }
        }
        return;
      }
    
      if (dxIsPositive) {
        let x_start = x1;
        let y_start = y1;
      }
      else {
        let x_start = x2;
        let y_start = y2; 
        let dx = -dx; 
        let dy = -dy;
      }

      while (((a < dx) | (a = dx)) & ((b > dy) | (b = dy))) {
        do Screen.drawPixel(x_start+a, y_start+b);
        // right or up
        if (diff < 0) {
          let a = a+1;
          let diff = diff+dy;
        }
        else {
          let b = b-1;
          let diff = diff-dx;
        }
      }
      return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
      var int dx;

      let dx = 0;
      while (dx < (x2-x1)) {
        do Screen.drawLine(x1+dx, y1, x1+dx, y2);
        let dx = dx + 1;
      }

      return;  
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
      var int dy, dx;

      if (r > 181) {
        do System.error(6);
        return;
      }

      let dy = -r;
      while ((dy < r) | (dy = r)) {
        let dx = Math.sqrt(Math.multiply(r, r) - Math.multiply(dy, dy));
        do Screen.drawLine(x-dx, y+dy, x+dx, y+dy);
        let dy = dy + 1;
      }

      return;
    }
}
