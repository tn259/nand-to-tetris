// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static boolean colour;

    /** Initializes the Screen. */
    function void init() {
      do Screen.setColor(false);
    }

    /** Erases the entire screen. */
    function void clearScreen() {
      var int x, y;
      do Screen.setColor(false);
      let x = 0;
      let y = 0;
      while (x < 256 & y < 512) {
        do Screen.drawPixel(x, y);
      }
      return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
      let colour = b;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
      var int address, value, xMod16, powi, mask;

      let address = Math.mult(32, y) + Math.divide(x, 16);
      let value = Memory.peek(16384+address);
     
      // x % 16 
      let xMod16 = x;
      while (xMod16 > 16) {
        let xMod16 = xMod16 - 16;
      }

      // pow(2, xMod16) = mask
      let powi = 0;
      let mask = 1;
      while (powi < xMod16) {
         let mask = Math.mult(mask, 2);
         let powi = powi + 1;
      }
      
      if (colour = true) {
        // set black
        let value = value & mask;
      else {
        // set white
        let mask = value & ~mask;
      }

      Memory.poke(address, value);
      return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
      var int dx, dy, diff, a, b;

      let dx = x2 - x1;
      let dy = y2 - y1;

      let a = 0;
      let b = 0; 
      let diff = 0;
      while ((a < dx | a = dx) & (b < dy | b = dy)) {
        do Screen.drawPixel(x1+a, y1+b);
        // right or up
        if (diff < 0) {
          let a = a+1;
          let diff = diff+dy;
        }
        else {
          let b = b+1; 
          let diff = diff-dx;
        }
      }
      return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
      var int dx;

      let dx = 0;
      while (dx < (x2-x1) | dx = (x2-x1)) {
        do Screen.drawLine(x1+dx, y1, x1+dx, y2);
        let dx = dx + 1;
      }

      return;  
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
      var int dy, dx;

      if (r > 181) {
        System.error(6);
        return;
      }

      let dy = -r;
      while (dy < r | dy = r) {
        let dx = Math.sqrt(Math.mult(r, r) - Math.mult(dy, dy));
        do Screen.drawLine(x-dx, y+dy, x+dx, y+dy);
        let dy = dy + 1;
      }

      return;
    }
}
