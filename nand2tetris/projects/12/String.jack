// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array chars;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
      let chars = Array.new(maxLength);
      let length = 0;
      return this;
    }

    /** Disposes this string. */
    method void dispose() {
      do chars.dispose();
      return;
    }

    /** Returns the current length of this string. */
    method int length() {
      return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
      return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
      let chars[j] = c;
      return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
      let chars[length] = c;
      let length = length + 1;
      return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
      let length = length - 1; 
      let chars[length] = 0;
      return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
      var int val, idx, d, l;
      var int c;

      let val = 0;
      let idx = 0;
      let l = length();

      while (idx < l) {
        let c = charAt(idx);
        if ((c > 47) & (c < 58)) {
          let d = c - 48;
          let val = Math.multiply(val, 10) + d;
        }
        else {
          return val;
        }
        let idx = idx+1;
      }
      return val;
     
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
      var int i;

      // reset to empty string
      let i = 0;
      while (i < length) {
        do eraseLastChar();
        let i = i + 1;
      }
      let length = 0;

      do intAsString(val);
      return;
    }

    /** Returns the new line character. */
    function char newLine() {
      return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
      return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
      return 34;
    }

    method void intAsString(int val) {
      var int lastDigit;
      var int c;

      let lastDigit = val - Math.multiply(Math.divide(val, 10), 10);
      let c = lastDigit + 48; // see char table

      if (val < 10) {
        do appendChar(c);
      }
      else {
        do intAsString(Math.divide(val, 10));
        do appendChar(c);
      }
      return;
    }









}
